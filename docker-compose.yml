services:
  postgres_db:
    image: postgres:14-alpine
    container_name: stock_in_order_postgres
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: stock_db
    ports:
      - "5433:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user", "-d", "stock_db"]
      interval: 5s
      timeout: 3s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: stock_in_order_rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: pass
    ports:
      - "5672:5672"   # Puerto para conexiones AMQP
      - "15672:15672" # Puerto para interfaz web de administraciÃ³n
    volumes:
      - ./rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    container_name: stock_in_order_api
    build:
      context: ./backend
    ports:
      - "8080:8080"
    environment:
      PORT: ":8080"
      DB_DSN: "postgres://user:pass@postgres_db:5432/stock_db?sslmode=disable"
      JWT_SECRET: "dev-jwt-secret-change-me"
      ENVIRONMENT: "development"
      SENTRY_DSN: "${SENTRY_DSN_BACKEND:-}"  # Optional: set via .env file
      RABBITMQ_URL: "amqp://user:pass@rabbitmq:5672/"
    depends_on:
      postgres_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully

  migrate:
    image: postgres:14-alpine
    container_name: stock_in_order_migrate
    depends_on:
      postgres_db:
        condition: service_healthy
    environment:
      PGPASSWORD: pass
    volumes:
      - ./backend/migrations:/migrations:ro
    command: >-
      sh -c 'for f in /migrations/*.sql; do echo "Applying $$f"; psql -h postgres_db -U user -d stock_db -f "$$f"; done'
    restart: "no"

  worker:
    container_name: stock_in_order_worker
    build:
      context: ./worker
    environment:
      DB_DSN: "postgres://user:pass@postgres_db:5432/stock_db?sslmode=disable"
      RABBITMQ_URL: "amqp://user:pass@rabbitmq:5672/"
      SENDGRID_API_KEY: "${SENDGRID_API_KEY:-}"  # Optional: set via .env file
    depends_on:
      postgres_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    restart: unless-stopped

  scheduler:
    container_name: stock_in_order_scheduler
    build:
      context: ./scheduler
    environment:
      RABBITMQ_URL: "amqp://user:pass@rabbitmq:5672/"
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  frontend:
    container_name: stock_in_order_frontend
    build:
      context: ./frontend
      args:
        VITE_API_URL: "http://localhost:8080/api/v1"
        VITE_SENTRY_DSN: "${SENTRY_DSN_FRONTEND:-}"  # Optional: set via .env file
    ports:
      - "5173:80"
    depends_on:
      postgres_db:
        condition: service_healthy
      api:
        condition: service_started
